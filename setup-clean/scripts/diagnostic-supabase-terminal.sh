#!/bin/bash

# =============================================================================
# DIAGNOSTIC COMPLET SUPABASE - AFFICHAGE TERMINAL DIRECT
# =============================================================================
# G√©n√®re un rapport d√©taill√© directement dans le terminal pour Claude Code
# Usage: sudo ./diagnostic-supabase-terminal.sh

set -euo pipefail

# Configuration
TARGET_USER="${SUDO_USER:-pi}"
PROJECT_DIR="/home/$TARGET_USER/stacks/supabase"

# Couleurs pour terminal
warn()  { echo -e "\033[1;33m[WARN]   \033[0m $*" >&2; }
ok()    { echo -e "\033[1;32m[OK]     \033[0m $*" >&2; }
error() { echo -e "\033[1;31m[ERROR] \033[0m $*" >&2; }

ok "üîç G√©n√©ration rapport diagnostic Supabase dans le terminal..."
ok "üìã Copiez TOUT ce qui suit pour Claude Code..."

echo ""
echo "# ============================================================================="
echo "# RAPPORT DIAGNOSTIC SUPABASE - TERMINAL OUTPUT"
echo "# ============================================================================="
echo "# INSTRUCTIONS POUR CLAUDE :"
echo "# 1. Analysez ce rapport complet"
echo "# 2. Identifiez les probl√®mes critiques"
echo "# 3. Proposez corrections sp√©cifiques"
echo "# 4. G√©n√©rez commandes de correction"
echo "# ============================================================================="
echo ""

echo "üïê TIMESTAMP: $(date)"
echo "üñ•Ô∏è  HOSTNAME: $(hostname)"
echo "üë§ USER: $TARGET_USER"
echo "üìÅ PROJECT_DIR: $PROJECT_DIR"
echo ""

# =============================================================================
# SECTION 1: √âTAT SYST√àME
# =============================================================================
echo "## 1. √âTAT SYST√àME"
echo ""
echo "### Architecture et OS:"
echo "Architecture: $(uname -m)"
echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '\"')"
echo "Kernel: $(uname -r)"
echo "Uptime: $(uptime -p)"
echo ""

# =============================================================================
# SECTION 2: DOCKER
# =============================================================================
echo "### Docker Status:"
echo "Docker version: $(docker --version)"
echo "Docker Compose version: $(docker compose version)"
echo ""
echo "### Services Docker Supabase:"
if cd "$PROJECT_DIR" 2>/dev/null; then
  docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "Erreur: docker compose ps"
else
  echo "Erreur: Impossible d'acc√©der √† $PROJECT_DIR"
fi
echo ""

# =============================================================================
# SECTION 3: FICHIER .ENV CRITIQUE
# =============================================================================
echo "## 2. ANALYSE FICHIER .ENV (CRITIQUE)"
echo ""
echo "### √âtat fichier .env:"

if [[ -f "$PROJECT_DIR/.env" ]]; then
  echo "‚úÖ Fichier .env EXISTE"
  echo "Taille: $(stat -f%z "$PROJECT_DIR/.env" 2>/dev/null || stat -c%s "$PROJECT_DIR/.env" 2>/dev/null || echo "inconnue") bytes"
  echo "Permissions: $(ls -la "$PROJECT_DIR/.env" | awk '{print $1,$3,$4}')"
  echo "Derni√®re modification: $(ls -la "$PROJECT_DIR/.env" | awk '{print $6,$7,$8}')"
  echo ""

  echo "### Variables critiques pr√©sentes:"
  local critical_vars=("SUPABASE_PORT" "POSTGRES_PASSWORD" "JWT_SECRET" "SUPABASE_ANON_KEY" "SUPABASE_SERVICE_KEY" "LOCAL_IP")
  for var in "${critical_vars[@]}"; do
    if grep -q "^${var}=" "$PROJECT_DIR/.env" 2>/dev/null; then
      local value=$(grep "^${var}=" "$PROJECT_DIR/.env" | cut -d'=' -f2 | cut -c1-20)
      echo "‚úÖ $var=${value}..."
    else
      echo "‚ùå $var=MANQUANT"
    fi
  done
  echo ""

  echo "### Contenu complet .env (masqu√© pour s√©curit√©):"
  sed 's/=.*/=***MASKED***/' "$PROJECT_DIR/.env" 2>/dev/null || echo "Erreur lecture .env"
  echo ""

  echo "### Backups .env disponibles:"
  ls -la "$PROJECT_DIR"/.env.bak.* 2>/dev/null | head -5 || echo "Aucune sauvegarde trouv√©e"

else
  echo "‚ùå FICHIER .ENV MANQUANT - PROBL√àME CRITIQUE"
  echo ""
  echo "### Recherche sauvegardes .env:"
  find "$PROJECT_DIR" -name ".env.bak.*" -type f 2>/dev/null | head -5 || echo "Aucune sauvegarde trouv√©e"
fi
echo ""

# =============================================================================
# SECTION 4: PORTS ET CONNECTIVIT√â
# =============================================================================
echo "## 3. PORTS ET CONNECTIVIT√â"
echo ""
echo "### Ports Docker mapp√©s:"
echo "Kong (attendu 8001): $(docker port supabase-kong 2>/dev/null || echo "Service non accessible")"
echo "PostgreSQL (attendu 5432): $(docker port supabase-db 2>/dev/null || echo "Service non accessible")"
echo "Studio (attendu 3000): $(docker port supabase-studio 2>/dev/null || echo "Service non accessible")"
echo ""

echo "### Tests connectivit√© locale:"
for port in 8001 3000 5432; do
  if timeout 3 bash -c "</dev/tcp/localhost/$port" 2>/dev/null; then
    echo "‚úÖ localhost:$port - ACCESSIBLE"
  else
    echo "‚ùå localhost:$port - NON ACCESSIBLE"
  fi
done
echo ""

echo "### Test API Supabase:"
if curl -sf --max-time 5 "http://localhost:8001" >/dev/null 2>&1; then
  local api_response=$(curl -s --max-time 5 "http://localhost:8001" 2>/dev/null | head -c 200)
  echo "‚úÖ API Supabase accessible"
  echo "Response sample: $api_response"
else
  echo "‚ùå API Supabase NON ACCESSIBLE"
fi
echo ""

# =============================================================================
# SECTION 5: LOGS SERVICES PROBL√âMATIQUES
# =============================================================================
echo "## 4. LOGS SERVICES (10 DERNI√àRES LIGNES)"
echo ""

if cd "$PROJECT_DIR" 2>/dev/null; then
  for service in realtime kong auth studio; do
    echo "### Logs $service:"
    docker compose logs --tail=10 "$service" 2>/dev/null || echo "Service $service non accessible"
    echo ""
  done
else
  echo "Impossible d'acc√©der aux logs (PROJECT_DIR inaccessible)"
fi

# =============================================================================
# SECTION 6: BASE DE DONN√âES
# =============================================================================
echo "## 5. BASE DE DONN√âES POSTGRESQL"
echo ""
echo "### Connectivit√© PostgreSQL:"

if docker exec supabase-db pg_isready -U postgres 2>/dev/null; then
  echo "‚úÖ PostgreSQL accessible"
  echo ""

  echo "### Sch√©mas pr√©sents:"
  docker exec supabase-db psql -U postgres -d postgres -tAc "SELECT schema_name FROM information_schema.schemata WHERE schema_name IN ('auth','realtime','storage','public');" 2>/dev/null || echo "Erreur requ√™te sch√©mas"
  echo ""

  echo "### Table Realtime schema_migrations (probl√®me fr√©quent):"
  if docker exec supabase-db psql -U postgres -d postgres -tAc "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'realtime' AND table_name = 'schema_migrations');" 2>/dev/null | grep -q "t"; then
    echo "‚úÖ Table realtime.schema_migrations existe"

    # V√©rifier structure
    echo "Structure de la table:"
    docker exec supabase-db psql -U postgres -d postgres -c "\d realtime.schema_migrations;" 2>/dev/null || echo "Erreur description table"

    # V√©rifier si colonne inserted_at existe
    if docker exec supabase-db psql -U postgres -d postgres -tAc "SELECT EXISTS (SELECT FROM information_schema.columns WHERE table_schema = 'realtime' AND table_name = 'schema_migrations' AND column_name = 'inserted_at');" 2>/dev/null | grep -q "t"; then
      echo "‚úÖ Colonne inserted_at pr√©sente (structure Ecto correcte)"
    else
      echo "‚ùå Colonne inserted_at MANQUANTE - Structure incorrecte pour Realtime"
    fi
  else
    echo "‚ùå Table realtime.schema_migrations MANQUANTE"
  fi

else
  echo "‚ùå PostgreSQL NON ACCESSIBLE"
fi
echo ""

# =============================================================================
# SECTION 7: RESSOURCES SYST√àME
# =============================================================================
echo "## 6. RESSOURCES SYST√àME"
echo ""
echo "### Utilisation m√©moire:"
echo "RAM totale: $(free -h | grep Mem | awk '{print $2}')"
echo "RAM utilis√©e: $(free -h | grep Mem | awk '{print $3}')"
echo "RAM libre: $(free -h | grep Mem | awk '{print $4}')"
echo ""

echo "### Top conteneurs par m√©moire:"
docker stats --no-stream --format "table {{.Name}}\t{{.MemUsage}}\t{{.CPUPerc}}" 2>/dev/null | head -8
echo ""

# =============================================================================
# SECTION 8: R√âSUM√â ET ACTIONS SUGG√âR√âES
# =============================================================================
echo "## 7. R√âSUM√â AUTOMATIQUE ET ACTIONS SUGG√âR√âES"
echo ""
echo "### Probl√®mes d√©tect√©s automatiquement:"

local issues=()

# V√©rification .env
if [[ ! -f "$PROJECT_DIR/.env" ]]; then
  issues+=("CRITIQUE: Fichier .env manquant")
fi

# V√©rification services restart
local restarting=$(docker ps --filter "status=restarting" --format "{{.Names}}" | grep "supabase-" 2>/dev/null || true)
if [[ -n "$restarting" ]]; then
  issues+=("BLOQUANT: Services en restart loop: $restarting")
fi

# V√©rification Kong port
local kong_port=$(docker port supabase-kong 2>/dev/null | grep "8000/tcp" | cut -d: -f2)
if [[ -n "$kong_port" && "$kong_port" != "8001" ]]; then
  issues+=("MAJEUR: Kong sur mauvais port: $kong_port (attendu: 8001)")
fi

# Afficher probl√®mes
if [[ ${#issues[@]} -eq 0 ]]; then
  echo "‚úÖ Aucun probl√®me critique d√©tect√© automatiquement"
else
  echo "‚ùå Probl√®mes d√©tect√©s:"
  for issue in "${issues[@]}"; do
    echo "   - $issue"
  done
fi
echo ""

echo "### Actions recommand√©es pour Claude Code:"
echo "1. Analyser section .env pour probl√®mes de variables"
echo "2. V√©rifier logs Realtime si restart loop"
echo "3. Examiner connectivit√© et ports mapp√©s"
echo "4. Proposer corrections sp√©cifiques bas√©es sur ce rapport"
echo ""

echo "### Commandes de correction rapides:"
echo "# Restaurer .env si manquant:"
echo "cd $PROJECT_DIR && ls -la .env.bak.* | head -1 | awk '{print \$9}' | xargs -I {} cp {} .env"
echo ""
echo "# Red√©marrer services probl√©matiques:"
echo "cd $PROJECT_DIR && docker compose restart kong realtime"
echo ""
echo "# Diagnostic complet:"
echo "cd $PROJECT_DIR && docker compose logs --tail=50"
echo ""

echo "# ============================================================================="
echo "# FIN RAPPORT DIAGNOSTIC"
echo "# ============================================================================="
echo "#"
echo "# COPIEZ TOUT CE QUI PR√âC√àDE ET COLLEZ DANS CLAUDE CODE"
echo "# PUIS DITES: \"Analyse ce rapport et donne-moi les corrections\""
echo "#"
echo "# ============================================================================="

ok "‚úÖ Diagnostic termin√© - Copiez tout le texte ci-dessus pour Claude Code !"