#!/bin/bash
# =============================================================================
# EMAIL TEST SCRIPT - Test email sending for configured providers
# =============================================================================
#
# Purpose: Test email sending with Resend, SendGrid, or Mailgun
#          Automatically detects configured provider and sends test email
#
# Author: PI5-SETUP Project
# Version: 1.0.0
# Target: Raspberry Pi 5 ARM64
#
# Features:
# - Auto-detects configured email provider
# - Tests actual email delivery
# - Validates API connectivity
# - Provides detailed error messages
#
# Usage:
#   sudo bash 03-test-email.sh [OPTIONS]
#
# Options:
#   --to <email>      Email address to send test to (required)
#   --provider <name> Force specific provider (resend|sendgrid|mailgun)
#   --verbose, -v     Verbose output
#   --help, -h        Show this help
#
# Examples:
#   # Auto-detect provider
#   sudo bash 03-test-email.sh --to your-email@example.com
#
#   # Force specific provider
#   sudo bash 03-test-email.sh --to your-email@example.com --provider resend
#
# =============================================================================

set -euo pipefail

# =============================================================================
# CONFIGURATION
# =============================================================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SUPABASE_DIR="/home/pi/stacks/supabase"

# Script options
TO_EMAIL=""
FORCE_PROVIDER=""
VERBOSE=0

# =============================================================================
# LOGGING FUNCTIONS
# =============================================================================

log_info() { echo -e "\033[1;36m[$(date +'%H:%M:%S')]\033[0m $*"; }
log_success() { echo -e "\033[1;32m[$(date +'%H:%M:%S')]\033[0m ‚úì $*"; }
log_error() { echo -e "\033[1;31m[$(date +'%H:%M:%S')]\033[0m ‚úó $*"; exit 1; }
log_warn() { echo -e "\033[1;33m[$(date +'%H:%M:%S')]\033[0m ‚ö†Ô∏è  $*"; }

section() {
    echo ""
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log_info "$*"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
}

# =============================================================================
# PROVIDER DETECTION
# =============================================================================

detect_provider() {
    section "üîç D√âTECTION DU PROVIDER"

    if [ -n "$FORCE_PROVIDER" ]; then
        log_info "Provider forc√©: $FORCE_PROVIDER"
        echo "$FORCE_PROVIDER"
        return 0
    fi

    local provider=""

    # Check .env file for configured providers
    if [ -f "$SUPABASE_DIR/.env" ]; then
        if grep -q "^RESEND_API_KEY=" "$SUPABASE_DIR/.env"; then
            provider="resend"
        elif grep -q "^SENDGRID_API_KEY=" "$SUPABASE_DIR/.env"; then
            provider="sendgrid"
        elif grep -q "^MAILGUN_API_KEY=" "$SUPABASE_DIR/.env"; then
            provider="mailgun"
        fi
    fi

    if [ -z "$provider" ]; then
        log_error "Aucun provider email configur√©. Ex√©cutez d'abord 01-email-provider-setup.sh"
    fi

    log_success "Provider d√©tect√©: $provider"
    echo "$provider"
}

# =============================================================================
# EMAIL SENDING FUNCTIONS
# =============================================================================

send_with_resend() {
    local to="$1"
    local api_key=$(grep "^RESEND_API_KEY=" "$SUPABASE_DIR/.env" | cut -d'=' -f2)
    local from_email=$(grep "^RESEND_FROM_EMAIL=" "$SUPABASE_DIR/.env" | cut -d'=' -f2)

    if [ -z "$api_key" ] || [ -z "$from_email" ]; then
        log_error "Configuration Resend incompl√®te dans .env"
    fi

    log_info "Envoi via Resend..."
    log_info "  From: $from_email"
    log_info "  To: $to"

    # Create JSON payload
    cat > /tmp/test-email-payload.json <<EOF
{
  "from": "$from_email",
  "to": "$to",
  "subject": "Test Email from Raspberry Pi 5 - Resend",
  "html": "<h1>üéâ Email Test Successful!</h1><p>Cet email a √©t√© envoy√© avec succ√®s depuis votre <strong>Raspberry Pi 5</strong> via <strong>Resend</strong>.</p><p><strong>Provider:</strong> Resend<br><strong>Date:</strong> $(date)<br><strong>Configuration:</strong> Supabase + Edge Functions + Resend API</p><hr><p style='color: #666; font-size: 12px;'>Generated by pi5-setup email test script</p>"
}
EOF

    # Send email
    local response=$(curl -s -X POST https://api.resend.com/emails \
        -H "Authorization: Bearer $api_key" \
        -H "Content-Type: application/json" \
        -d @/tmp/test-email-payload.json)

    # Check response
    if echo "$response" | grep -q '"id"'; then
        local email_id=$(echo "$response" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
        log_success "Email envoy√© avec succ√®s !"
        log_info "  Email ID: $email_id"
        log_info "  V√©rifiez votre bo√Æte: $to"
        log_info "  Dashboard: https://resend.com/emails"
        return 0
    else
        log_error "√âchec de l'envoi: $response"
    fi

    rm -f /tmp/test-email-payload.json
}

send_with_sendgrid() {
    local to="$1"
    local api_key=$(grep "^SENDGRID_API_KEY=" "$SUPABASE_DIR/.env" | cut -d'=' -f2)
    local from_email=$(grep "^SENDGRID_FROM_EMAIL=" "$SUPABASE_DIR/.env" | cut -d'=' -f2)

    if [ -z "$api_key" ] || [ -z "$from_email" ]; then
        log_error "Configuration SendGrid incompl√®te dans .env"
    fi

    log_info "Envoi via SendGrid..."
    log_info "  From: $from_email"
    log_info "  To: $to"

    # Create JSON payload
    cat > /tmp/test-email-payload.json <<EOF
{
  "personalizations": [
    {
      "to": [{"email": "$to"}]
    }
  ],
  "from": {"email": "$from_email"},
  "subject": "Test Email from Raspberry Pi 5 - SendGrid",
  "content": [
    {
      "type": "text/html",
      "value": "<h1>üéâ Email Test Successful!</h1><p>Cet email a √©t√© envoy√© avec succ√®s depuis votre <strong>Raspberry Pi 5</strong> via <strong>SendGrid</strong>.</p><p><strong>Provider:</strong> SendGrid<br><strong>Date:</strong> $(date)<br><strong>Configuration:</strong> Supabase + Edge Functions + SendGrid API</p><hr><p style='color: #666; font-size: 12px;'>Generated by pi5-setup email test script</p>"
    }
  ]
}
EOF

    # Send email
    local response=$(curl -s -X POST https://api.sendgrid.com/v3/mail/send \
        -H "Authorization: Bearer $api_key" \
        -H "Content-Type: application/json" \
        -d @/tmp/test-email-payload.json)

    # SendGrid returns empty body on success (202 status)
    if [ -z "$response" ]; then
        log_success "Email envoy√© avec succ√®s !"
        log_info "  V√©rifiez votre bo√Æte: $to"
        log_info "  Dashboard: https://app.sendgrid.com/statistics"
        return 0
    else
        log_error "√âchec de l'envoi: $response"
    fi

    rm -f /tmp/test-email-payload.json
}

send_with_mailgun() {
    local to="$1"
    local api_key=$(grep "^MAILGUN_API_KEY=" "$SUPABASE_DIR/.env" | cut -d'=' -f2)
    local from_email=$(grep "^MAILGUN_FROM_EMAIL=" "$SUPABASE_DIR/.env" | cut -d'=' -f2)
    local domain=$(grep "^MAILGUN_DOMAIN=" "$SUPABASE_DIR/.env" | cut -d'=' -f2)
    local region=$(grep "^MAILGUN_REGION=" "$SUPABASE_DIR/.env" | cut -d'=' -f2 || echo "us")

    if [ -z "$api_key" ] || [ -z "$from_email" ] || [ -z "$domain" ]; then
        log_error "Configuration Mailgun incompl√®te dans .env"
    fi

    local base_url="https://api.mailgun.net"
    if [ "$region" = "eu" ]; then
        base_url="https://api.eu.mailgun.net"
    fi

    log_info "Envoi via Mailgun..."
    log_info "  From: $from_email"
    log_info "  To: $to"
    log_info "  Domain: $domain"
    log_info "  Region: $region"

    # Send email
    local response=$(curl -s -X POST "$base_url/v3/$domain/messages" \
        --user "api:$api_key" \
        -F from="$from_email" \
        -F to="$to" \
        -F subject="Test Email from Raspberry Pi 5 - Mailgun" \
        -F html="<h1>üéâ Email Test Successful!</h1><p>Cet email a √©t√© envoy√© avec succ√®s depuis votre <strong>Raspberry Pi 5</strong> via <strong>Mailgun</strong>.</p><p><strong>Provider:</strong> Mailgun<br><strong>Date:</strong> $(date)<br><strong>Domain:</strong> $domain<br><strong>Region:</strong> $region<br><strong>Configuration:</strong> Supabase + Edge Functions + Mailgun API</p><hr><p style='color: #666; font-size: 12px;'>Generated by pi5-setup email test script</p>")

    # Check response
    if echo "$response" | grep -q '"id"'; then
        local email_id=$(echo "$response" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
        log_success "Email envoy√© avec succ√®s !"
        log_info "  Email ID: $email_id"
        log_info "  V√©rifiez votre bo√Æte: $to"
        log_info "  Logs: https://app.mailgun.com/app/logs"
        return 0
    else
        log_error "√âchec de l'envoi: $response"
    fi
}

# =============================================================================
# ARGUMENT PARSING
# =============================================================================

parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --to)
                TO_EMAIL="$2"
                shift 2
                ;;
            --provider)
                FORCE_PROVIDER="$2"
                shift 2
                ;;
            --verbose|-v)
                VERBOSE=1
                shift
                ;;
            --help|-h)
                cat <<EOF
Usage: $0 [OPTIONS]

Options:
  --to <email>      Email address to send test to (required)
  --provider <name> Force specific provider (resend|sendgrid|mailgun)
  --verbose, -v     Verbose output
  --help, -h        Show this help

Examples:
  sudo bash $0 --to your-email@example.com
  sudo bash $0 --to test@example.com --provider resend

EOF
                exit 0
                ;;
            *)
                log_error "Option inconnue: $1"
                ;;
        esac
    done

    # Validate required arguments
    if [ -z "$TO_EMAIL" ]; then
        log_error "L'option --to est requise. Utilisez --help pour plus d'informations."
    fi

    # Validate email format
    if ! echo "$TO_EMAIL" | grep -qE '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'; then
        log_error "Format d'email invalide: $TO_EMAIL"
    fi
}

# =============================================================================
# MAIN
# =============================================================================

main() {
    section "üìß TEST D'ENVOI EMAIL"

    log_info "Email Test Script v1.0.0"

    # Detect provider
    local provider=$(detect_provider)

    # Send test email
    section "üì® ENVOI DU TEST EMAIL"

    case "$provider" in
        resend)
            send_with_resend "$TO_EMAIL"
            ;;
        sendgrid)
            send_with_sendgrid "$TO_EMAIL"
            ;;
        mailgun)
            send_with_mailgun "$TO_EMAIL"
            ;;
        *)
            log_error "Provider inconnu: $provider"
            ;;
    esac

    section "‚úÖ TEST TERMIN√â"
    log_success "Test d'envoi email termin√© avec succ√®s !"
    echo ""
}

# Run
parse_args "$@"
main
