#!/usr/bin/env bash
#==============================================================================
# PI5-EMAIL-STACK - FULL MAIL SERVER DEPLOYMENT
#==============================================================================
# Version: 1.0.0
# Description: Deploy complete self-hosted mail server
#              Roundcube + Postfix + Dovecot + Rspamd + PostgreSQL
# Architecture: ARM64 (Raspberry Pi 5)
# Requirements: Docker, Docker Compose, Traefik, Domain with DNS access
#
# Components:
# - Postfix: SMTP server (send/receive email)
# - Dovecot: IMAP/POP3 server (email storage/retrieval)
# - Rspamd: Anti-spam filter + DKIM signing
# - Roundcube: Webmail interface
# - PostgreSQL: Database for users/aliases
#
# DNS Requirements:
# - A record: mail.yourdomain.com -> your_pi_ip
# - MX record: yourdomain.com -> mail.yourdomain.com (priority 10)
# - TXT record (SPF): v=spf1 mx ~all
# - TXT record (DKIM): Generated by script
# - TXT record (DMARC): v=DMARC1; p=quarantine; rua=mailto:postmaster@yourdomain.com
#
# Usage:
#   curl -fsSL https://raw.githubusercontent.com/.../01-roundcube-deploy-full.sh | sudo bash
#   OR
#   sudo bash 01-roundcube-deploy-full.sh
#==============================================================================

set -euo pipefail

#------------------------------------------------------------------------------
# CONFIGURATION
#------------------------------------------------------------------------------

readonly SCRIPT_VERSION="1.0.0"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
readonly COMPOSE_FILE="${PROJECT_ROOT}/compose/docker-compose-full.yml"
readonly CONFIG_DIR="${PROJECT_ROOT}/config"
readonly LOG_DIR="/var/log/pi5-email"
readonly LOG_FILE="${LOG_DIR}/roundcube-deploy-full.log"
readonly BACKUP_DIR="/var/backups/pi5-email"
readonly ENV_FILE="${PROJECT_ROOT}/.env"
readonly DKIM_DIR="${CONFIG_DIR}/rspamd/dkim"

# Common scripts library
readonly COMMON_SCRIPTS_DIR="/opt/pi5-setup/common-scripts"
if [[ -f "${COMMON_SCRIPTS_DIR}/lib.sh" ]]; then
    source "${COMMON_SCRIPTS_DIR}/lib.sh"
else
    # Fallback functions
    log() { echo -e "\033[36m[INFO]\033[0m $*"; }
    warn() { echo -e "\033[33m[WARN]\033[0m $*"; }
    ok() { echo -e "\033[32m[OK]\033[0m $*"; }
    error() { echo -e "\033[31m[ERROR]\033[0m $* (line ${BASH_LINENO[0]})" >&2; exit 1; }
fi

#------------------------------------------------------------------------------
# HELPER FUNCTIONS
#------------------------------------------------------------------------------

check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
    fi
}

check_dependencies() {
    log "Checking dependencies..."

    local missing_deps=()

    if ! command -v docker &>/dev/null; then
        missing_deps+=("docker")
    fi

    if ! command -v docker-compose &>/dev/null && ! docker compose version &>/dev/null; then
        missing_deps+=("docker-compose")
    fi

    if ! command -v dig &>/dev/null; then
        missing_deps+=("dnsutils")
    fi

    if ! command -v openssl &>/dev/null; then
        missing_deps+=("openssl")
    fi

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        error "Missing dependencies: ${missing_deps[*]}\nInstall: sudo apt install -y ${missing_deps[*]}"
    fi

    # Check if Traefik is running
    if ! docker ps --format '{{.Names}}' | grep -q '^traefik$'; then
        error "Traefik must be running. Deploy Traefik first:\ncurl -fsSL https://raw.githubusercontent.com/.../01-traefik-deploy-*.sh | sudo bash"
    fi

    ok "All dependencies satisfied"
}

create_directories() {
    log "Creating directories..."

    mkdir -p "$LOG_DIR" "$BACKUP_DIR" \
             "${CONFIG_DIR}"/{roundcube,postfix,dovecot,rspamd,rspamd/dkim}

    chmod 755 "$LOG_DIR" "$BACKUP_DIR"
    chmod 700 "${DKIM_DIR}"

    ok "Directories created"
}

generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
}

detect_traefik_scenario() {
    log "Detecting Traefik configuration..."

    local traefik_config=""

    if [[ -f "/opt/pi5-traefik/.env" ]]; then
        traefik_config="/opt/pi5-traefik/.env"
    elif [[ -f "/opt/traefik/.env" ]]; then
        traefik_config="/opt/traefik/.env"
    else
        warn "Traefik .env not found, using default cert resolver"
        echo "letsencrypt"
        return
    fi

    if grep -q "CERT_RESOLVER=cloudflare" "$traefik_config"; then
        echo "cloudflare"
    elif grep -q "CERT_RESOLVER=duckdns" "$traefik_config"; then
        echo "duckdns"
    else
        echo "letsencrypt"
    fi
}

prompt_domain() {
    log "Domain configuration for self-hosted mail server"
    echo ""
    warn "IMPORTANT: You MUST own a domain and have DNS access"
    warn "DuckDNS and other dynamic DNS services are NOT suitable for mail servers"
    echo ""
    echo "Your domain will be used for:"
    echo "  - Webmail: mail.yourdomain.com"
    echo "  - SMTP/IMAP: mail.yourdomain.com"
    echo "  - Email addresses: user@yourdomain.com"
    echo ""

    read -p "Enter your domain (e.g., yourdomain.com): " MAIL_DOMAIN

    if [[ -z "$MAIL_DOMAIN" ]]; then
        error "Domain cannot be empty"
    fi

    # Validate domain format
    if ! [[ "$MAIL_DOMAIN" =~ ^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$ ]]; then
        error "Invalid domain format: $MAIL_DOMAIN"
    fi

    MAIL_HOSTNAME="mail.${MAIL_DOMAIN}"

    ok "Domain: $MAIL_DOMAIN"
    ok "Hostname: $MAIL_HOSTNAME"
}

check_dns_records() {
    log "Checking DNS records..."

    local has_errors=false

    # Check A record
    log "Checking A record for ${MAIL_HOSTNAME}..."
    if dig +short "$MAIL_HOSTNAME" A | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
        local resolved_ip
        resolved_ip=$(dig +short "$MAIL_HOSTNAME" A | head -n1)
        ok "A record found: ${MAIL_HOSTNAME} -> ${resolved_ip}"
    else
        warn "A record NOT found for ${MAIL_HOSTNAME}"
        warn "Add DNS record: ${MAIL_HOSTNAME} A <your_pi_ip>"
        has_errors=true
    fi

    # Check MX record
    log "Checking MX record for ${MAIL_DOMAIN}..."
    if dig +short "$MAIL_DOMAIN" MX | grep -q "$MAIL_HOSTNAME"; then
        ok "MX record found: ${MAIL_DOMAIN} -> ${MAIL_HOSTNAME}"
    else
        warn "MX record NOT found for ${MAIL_DOMAIN}"
        warn "Add DNS record: ${MAIL_DOMAIN} MX 10 ${MAIL_HOSTNAME}"
        has_errors=true
    fi

    # Check SPF record
    log "Checking SPF record for ${MAIL_DOMAIN}..."
    if dig +short "$MAIL_DOMAIN" TXT | grep -q "v=spf1"; then
        ok "SPF record found"
    else
        warn "SPF record NOT found for ${MAIL_DOMAIN}"
        warn "Add DNS TXT record: ${MAIL_DOMAIN} TXT 'v=spf1 mx ~all'"
        has_errors=true
    fi

    if [[ "$has_errors" == true ]]; then
        echo ""
        warn "DNS records are missing or incomplete"
        warn "Your mail server will NOT work properly without correct DNS"
        echo ""
        read -p "Continue anyway? [y/N]: " continue_choice
        if [[ ! "$continue_choice" =~ ^[Yy]$ ]]; then
            error "Deployment cancelled. Fix DNS records and try again."
        fi
    else
        ok "All DNS records validated"
    fi
}

generate_dkim_keys() {
    log "Generating DKIM keys for email signing..."

    if [[ -f "${DKIM_DIR}/${MAIL_DOMAIN}.private" ]]; then
        warn "DKIM keys already exist, skipping generation"
        return
    fi

    # Generate 2048-bit RSA key
    openssl genrsa -out "${DKIM_DIR}/${MAIL_DOMAIN}.private" 2048
    openssl rsa -in "${DKIM_DIR}/${MAIL_DOMAIN}.private" -pubout -out "${DKIM_DIR}/${MAIL_DOMAIN}.public"

    chmod 600 "${DKIM_DIR}/${MAIL_DOMAIN}.private"
    chmod 644 "${DKIM_DIR}/${MAIL_DOMAIN}.public"

    ok "DKIM keys generated"
}

generate_dkim_dns_record() {
    log "Generating DKIM DNS record..."

    local public_key
    public_key=$(grep -v "BEGIN\|END" "${DKIM_DIR}/${MAIL_DOMAIN}.public" | tr -d '\n')

    DKIM_DNS_RECORD="dkim._domainkey.${MAIL_DOMAIN} TXT 'v=DKIM1; k=rsa; p=${public_key}'"

    ok "DKIM DNS record generated"
}

prompt_relay_config() {
    log "SMTP Relay Configuration (optional)"
    echo ""
    echo "Using an SMTP relay (like SendGrid, Mailgun) improves deliverability."
    echo "Leave blank to send emails directly (higher risk of being marked as spam)."
    echo ""

    read -p "Use SMTP relay? [y/N]: " use_relay

    if [[ "$use_relay" =~ ^[Yy]$ ]]; then
        read -p "Relay host (e.g., smtp.sendgrid.net:587): " relay_host
        read -p "Relay username: " relay_user
        read -s -p "Relay password: " relay_pass
        echo ""

        RELAYHOST="$relay_host"
        RELAYHOST_USERNAME="$relay_user"
        RELAYHOST_PASSWORD="$relay_pass"

        ok "SMTP relay configured"
    else
        RELAYHOST=""
        RELAYHOST_USERNAME=""
        RELAYHOST_PASSWORD=""
        warn "No SMTP relay - emails sent directly (may be marked as spam)"
    fi
}

generate_env_file() {
    log "Generating .env file..."

    local mail_db_password roundcube_db_password
    mail_db_password=$(generate_password)
    roundcube_db_password=$(generate_password)

    local cert_resolver
    cert_resolver=$(detect_traefik_scenario)

    cat > "$ENV_FILE" <<EOF
#==============================================================================
# PI5-EMAIL-STACK - FULL MAIL SERVER CONFIGURATION
#==============================================================================
# Generated: $(date)
# Version: ${SCRIPT_VERSION}
#==============================================================================

# Domain Configuration
MAIL_DOMAIN=${MAIL_DOMAIN}
MAIL_HOSTNAME=${MAIL_HOSTNAME}

# Traefik Configuration
TRAEFIK_CERT_RESOLVER=${cert_resolver}

# Mail Server Databases
MAIL_DB_PASSWORD=${mail_db_password}
ROUNDCUBE_DB_PASSWORD=${roundcube_db_password}

# SMTP Relay (optional - improves deliverability)
RELAYHOST=${RELAYHOST}
RELAYHOST_USERNAME=${RELAYHOST_USERNAME}
RELAYHOST_PASSWORD=${RELAYHOST_PASSWORD}

#==============================================================================
# DNS RECORDS REQUIRED
#==============================================================================
# Add these records to your DNS provider:
#
# 1. A Record:
#    ${MAIL_HOSTNAME} A <your_pi_ip>
#
# 2. MX Record:
#    ${MAIL_DOMAIN} MX 10 ${MAIL_HOSTNAME}
#
# 3. SPF Record:
#    ${MAIL_DOMAIN} TXT "v=spf1 mx ~all"
#
# 4. DKIM Record (generated below):
#    ${DKIM_DNS_RECORD}
#
# 5. DMARC Record:
#    _dmarc.${MAIL_DOMAIN} TXT "v=DMARC1; p=quarantine; rua=mailto:postmaster@${MAIL_DOMAIN}"
#
#==============================================================================
EOF

    chmod 600 "$ENV_FILE"
    ok ".env file created"
}

create_postfix_config() {
    log "Creating Postfix configuration..."

    cat > "${CONFIG_DIR}/postfix/main.cf" <<EOF
# Postfix main configuration
myhostname = ${MAIL_HOSTNAME}
mydomain = ${MAIL_DOMAIN}
myorigin = \$mydomain
mydestination = \$myhostname, localhost.\$mydomain, localhost, \$mydomain

# Network
inet_interfaces = all
inet_protocols = ipv4

# TLS
smtpd_tls_cert_file = /etc/ssl/certs/ssl-cert-snakeoil.pem
smtpd_tls_key_file = /etc/ssl/private/ssl-cert-snakeoil.key
smtpd_use_tls = yes
smtpd_tls_security_level = may
smtp_tls_security_level = may

# SASL Authentication
smtpd_sasl_type = dovecot
smtpd_sasl_path = inet:dovecot:12345
smtpd_sasl_auth_enable = yes

# Restrictions
smtpd_recipient_restrictions =
    permit_mynetworks,
    permit_sasl_authenticated,
    reject_unauth_destination

# Virtual mailbox
virtual_mailbox_domains = pgsql:/etc/postfix/pgsql-virtual-mailbox-domains.cf
virtual_mailbox_maps = pgsql:/etc/postfix/pgsql-virtual-mailbox-maps.cf
virtual_alias_maps = pgsql:/etc/postfix/pgsql-virtual-alias-maps.cf
virtual_transport = lmtp:dovecot:24

# Milter (Rspamd)
smtpd_milters = inet:rspamd:11332
non_smtpd_milters = inet:rspamd:11332
milter_default_action = accept
milter_protocol = 6

# Size limits
message_size_limit = 26214400
mailbox_size_limit = 0
EOF

    chmod 644 "${CONFIG_DIR}/postfix/main.cf"

    # Database init SQL
    cat > "${CONFIG_DIR}/postfix/init-db.sql" <<EOF
-- Mail server database schema

CREATE TABLE IF NOT EXISTS virtual_domains (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS virtual_users (
    id SERIAL PRIMARY KEY,
    domain_id INTEGER NOT NULL REFERENCES virtual_domains(id) ON DELETE CASCADE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS virtual_aliases (
    id SERIAL PRIMARY KEY,
    domain_id INTEGER NOT NULL REFERENCES virtual_domains(id) ON DELETE CASCADE,
    source VARCHAR(255) NOT NULL,
    destination VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert default domain
INSERT INTO virtual_domains (name) VALUES ('${MAIL_DOMAIN}') ON CONFLICT DO NOTHING;

-- Create default postmaster account
INSERT INTO virtual_users (domain_id, email, password)
VALUES (
    (SELECT id FROM virtual_domains WHERE name = '${MAIL_DOMAIN}'),
    'postmaster@${MAIL_DOMAIN}',
    '\$2y\$10\$EXAMPLE_HASH_REPLACE_ME'
) ON CONFLICT DO NOTHING;
EOF

    chmod 644 "${CONFIG_DIR}/postfix/init-db.sql"

    ok "Postfix config created"
}

create_dovecot_config() {
    log "Creating Dovecot configuration..."

    mkdir -p "${CONFIG_DIR}/dovecot/conf.d"

    cat > "${CONFIG_DIR}/dovecot/dovecot.conf" <<EOF
# Dovecot main configuration
protocols = imap pop3 lmtp
listen = *

# Authentication
auth_mechanisms = plain login
disable_plaintext_auth = no

# Mail location
mail_location = maildir:/var/mail/%d/%n/Maildir

# SSL
ssl = no

# Logging
log_path = /dev/stdout
auth_verbose = yes
EOF

    cat > "${CONFIG_DIR}/dovecot/conf.d/10-auth.conf" <<EOF
# Authentication configuration
auth_mechanisms = plain login

passdb {
    driver = sql
    args = /etc/dovecot/dovecot-sql.conf
}

userdb {
    driver = sql
    args = /etc/dovecot/dovecot-sql.conf
}
EOF

    chmod 644 "${CONFIG_DIR}/dovecot/dovecot.conf"
    chmod 644 "${CONFIG_DIR}/dovecot/conf.d/10-auth.conf"

    ok "Dovecot config created"
}

create_rspamd_config() {
    log "Creating Rspamd configuration..."

    cat > "${CONFIG_DIR}/rspamd/dkim_signing.conf" <<EOF
# DKIM signing configuration
selector = "dkim";
path = "/var/lib/rspamd/dkim/${MAIL_DOMAIN}.private";
allow_username_mismatch = true;
EOF

    chmod 644 "${CONFIG_DIR}/rspamd/dkim_signing.conf"

    ok "Rspamd config created"
}

create_roundcube_config() {
    log "Creating Roundcube configuration..."

    cat > "${CONFIG_DIR}/roundcube/config.inc.php" <<'EOF'
<?php
// Roundcube configuration for self-hosted mail server

$config = [];

// Database
$config['db_dsnw'] = sprintf(
    'pgsql://%s:%s@%s:%s/%s',
    getenv('ROUNDCUBEMAIL_DB_USER'),
    getenv('ROUNDCUBEMAIL_DB_PASSWORD'),
    getenv('ROUNDCUBEMAIL_DB_HOST'),
    getenv('ROUNDCUBEMAIL_DB_PORT'),
    getenv('ROUNDCUBEMAIL_DB_NAME')
);

// IMAP (Dovecot)
$config['default_host'] = getenv('ROUNDCUBEMAIL_DEFAULT_HOST');
$config['default_port'] = getenv('ROUNDCUBEMAIL_DEFAULT_PORT');

// SMTP (Postfix)
$config['smtp_server'] = getenv('ROUNDCUBEMAIL_SMTP_SERVER');
$config['smtp_port'] = getenv('ROUNDCUBEMAIL_SMTP_PORT');
$config['smtp_user'] = '%u';
$config['smtp_pass'] = '%p';
$config['smtp_auth_type'] = 'LOGIN';

// Security
$config['des_key'] = bin2hex(random_bytes(24));
$config['cipher_method'] = 'AES-256-CBC';

// Interface
$config['skin'] = 'elastic';
$config['language'] = 'fr_FR';

// Features
$config['enable_installer'] = false;
$config['auto_create_user'] = true;
$config['preview_pane'] = true;

// Plugins
$config['plugins'] = ['archive', 'zipdownload', 'managesieve'];

return $config;
EOF

    chmod 644 "${CONFIG_DIR}/roundcube/config.inc.php"
    ok "Roundcube config created"
}

backup_existing_data() {
    if docker ps -a --format '{{.Names}}' | grep -q '^mail-db$'; then
        log "Backing up existing mail data..."

        local backup_file="${BACKUP_DIR}/mail-backup-$(date +%Y%m%d-%H%M%S).tar.gz"

        docker exec mail-db pg_dumpall -U mailuser | gzip > "${backup_file}"

        ok "Backup saved: ${backup_file}"
    fi
}

deploy_stack() {
    log "Deploying full mail server stack..."

    cd "$PROJECT_ROOT"

    # Pull images
    docker-compose -f "$COMPOSE_FILE" pull

    # Deploy
    docker-compose -f "$COMPOSE_FILE" up -d

    ok "Stack deployed"
}

wait_for_services() {
    log "Waiting for services to be healthy..."

    local max_wait=180
    local waited=0

    while [[ $waited -lt $max_wait ]]; do
        local healthy_count
        healthy_count=$(docker ps --format '{{.Names}}\t{{.Status}}' | grep -E 'roundcube|mail-db|postfix|dovecot' | grep -c 'healthy\|Up' || true)

        if [[ $healthy_count -ge 4 ]]; then
            ok "Services are ready"
            return 0
        fi

        sleep 5
        waited=$((waited + 5))
        echo -n "."
    done

    error "Services failed to become healthy after ${max_wait}s"
}

print_summary() {
    echo ""
    echo "╔════════════════════════════════════════════════════════════════╗"
    echo "║             FULL MAIL SERVER DEPLOYMENT SUCCESS               ║"
    echo "╚════════════════════════════════════════════════════════════════╝"
    echo ""
    echo "📧 WEBMAIL ACCESS"
    echo "   URL: https://mail.${MAIL_DOMAIN}"
    echo ""
    echo "📬 MAIL SERVER DETAILS"
    echo "   IMAP: ${MAIL_HOSTNAME}:993 (SSL)"
    echo "   SMTP: ${MAIL_HOSTNAME}:587 (TLS)"
    echo ""
    echo "🔐 ADMIN ACCESS"
    echo "   Rspamd UI: https://rspamd.${MAIL_DOMAIN}"
    echo ""
    echo "⚠️  CRITICAL: ADD THESE DNS RECORDS NOW"
    echo ""
    echo "1. DKIM Record (copy exactly):"
    echo "   ${DKIM_DNS_RECORD}"
    echo ""
    echo "2. DMARC Record:"
    echo "   _dmarc.${MAIL_DOMAIN} TXT \"v=DMARC1; p=quarantine; rua=mailto:postmaster@${MAIL_DOMAIN}\""
    echo ""
    echo "📝 NEXT STEPS"
    echo "   1. Add DNS records above"
    echo "   2. Create user accounts (see docs/USER-MANAGEMENT.md)"
    echo "   3. Test email delivery: https://www.mail-tester.com"
    echo "   4. Configure email client (Thunderbird, Outlook, etc.)"
    echo ""
    echo "📂 CONFIGURATION"
    echo "   Environment: ${ENV_FILE}"
    echo "   Logs:        ${LOG_FILE}"
    echo "   DKIM Keys:   ${DKIM_DIR}/"
    echo ""
    echo "🔧 USEFUL COMMANDS"
    echo "   Logs:    docker-compose -f ${COMPOSE_FILE} logs -f"
    echo "   Restart: docker-compose -f ${COMPOSE_FILE} restart"
    echo "   Stop:    docker-compose -f ${COMPOSE_FILE} stop"
    echo ""
    echo "✅ Deployment completed successfully!"
    echo ""
}

#------------------------------------------------------------------------------
# MAIN
#------------------------------------------------------------------------------

main() {
    echo "╔════════════════════════════════════════════════════════════════╗"
    echo "║            PI5-EMAIL-STACK - FULL MAIL SERVER                 ║"
    echo "║          (Roundcube + Postfix + Dovecot + Rspamd)            ║"
    echo "║                    Version ${SCRIPT_VERSION}                           ║"
    echo "╚════════════════════════════════════════════════════════════════╝"
    echo ""

    check_root
    create_directories

    # Log to file
    exec 1> >(tee -a "$LOG_FILE")
    exec 2>&1

    log "Starting full mail server deployment..."

    check_dependencies
    prompt_domain
    check_dns_records
    generate_dkim_keys
    generate_dkim_dns_record
    prompt_relay_config
    generate_env_file
    create_postfix_config
    create_dovecot_config
    create_rspamd_config
    create_roundcube_config
    backup_existing_data
    deploy_stack
    wait_for_services

    print_summary

    ok "Script completed successfully"
}

# Run main
main "$@"
